//-----------------------------------------------------------------------------
// Copyright (c) 2012 GarageGames, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//-----------------------------------------------------------------------------

$PostFX::BloomPostFX::threshold = 1.0;
$PostFX::BloomPostFX::intensity = 0.5;
$PostFX::BloomPostFX::radius = 8.0;

// Valid Values: 0, 1, 2, 3
$PostFX::BloomPostFX::quality = 1;

singleton ShaderData( PFX_BloomThreshold_Shader )
{
   DXVertexShaderFile = $Core::CommonShaderPath @ "/postFX/postFxV.hlsl";
	 DXPixelShaderFile  = "./bloomThresholdP.hlsl";
	 
	 samplerNames[0] = "$inputTex";
	 
	 pixVersion = 3.0;
};

//singleton ShaderData( PFX_BloomDownSample_Shader )
//{
//   DXVertexShaderFile = $Core::CommonShaderPath @ "/postFX/postFxV.hlsl";
//	 DXPixelShaderFile  = "./downSampleP.hlsl";
//	 
//	 samplerNames[0] = "$inputTex";
//	 
//	 pixVersion = 3.0;
//};

singleton ShaderData( PFX_BloomUpSample_Shader )
{
   DXVertexShaderFile = $Core::CommonShaderPath @ "/postFX/postFxV.hlsl";
	 DXPixelShaderFile  = "./upSampleP.hlsl";
	 
	 samplerNames[0] = "$inputTex";
	 
	 pixVersion = 3.0;
};

singleton ShaderData( PFX_BloomCombine_Shader )
{
   DXVertexShaderFile = $Core::CommonShaderPath @ "/postFX/postFxV.hlsl";
	 DXPixelShaderFile  = "./bloomCombineP.hlsl";
	 
	 samplerNames[0] = "$inputTex";
	 
	 pixVersion = 3.0;
};

singleton GFXStateBlockData( BloomPostFX_SampleStateBlock : PFX_DefaultStateBlock )
{
   samplersDefined = true;
   samplerStates[0] = SamplerClampLinear;
};

singleton GFXStateBlockData( BloomPostFX_Combine_SampleStateBlock : PFX_DefaultStateBlock )
{
   samplersDefined = true;
   samplerStates[0] = SamplerClampLinear;
	 samplerStates[1] = SamplerClampLinear;
	 samplerStates[2] = SamplerClampLinear;
};

function BloomPostFX::setShaderConsts( %this )
{
	%this.setShaderConst("$threshold", $PostFX::BloomPostFX::threshold);
	
	%blurOne = %this->blur_one;
	%blurOne.setShaderConst("$blurRadius", $PostFX::BloomPostFX::radius);
	
	%blurTwo = %this->blur_two;
	%blurTwo.setShaderConst("$blurRadius", $PostFX::BloomPostFX::radius);
	
	%combine = %this->bloom_combine;
	%combine.setShaderConst("$intensity", $PostFX::BloomPostFX::intensity);
	
	%steps = mRound($PostFX::BloomPostFX::radius * 0.333 + 1);
	echo(%steps);
	
	%blurOne.setShaderConst("$numSteps", %steps);
	%blurTwo.setShaderConst("$numSteps", %steps);
}

function BloomPostFX::preProcess( %this )
{
	if ( $PostFX::BloomPostFX::quality !$= %this.quality )
  {
		%this.quality = mClamp( mRound( $PostFX::BloomPostFX::quality ), 0, 3 );
		
		%blurOne = %this->blur_one;
		%blurTwo = %this->blur_two;
		%blurOne.setShaderMacro( "QUALITY", %this.quality );
		%blurTwo.setShaderMacro( "QUALITY", %this.quality );
	}
}

function BloomPostFX::onAdd(%this)
{
   //Register the postFX with the manager
   PostFXManager.registerPostEffect(%this);
}

function BloomPostFX::onEnabled( %this )
{
   return true;
}

function BloomPostFX::onDisabled( %this )
{
   return true;
}

//This is used to populate the PostFXEditor's settings so the post FX can be edited
//This is automatically polled for any postFX that has been registered(in our onAdd) and the settings
//are thus exposed for editing
function BloomPostFX::populatePostFXSettings(%this)
{
   PostEffectEditorInspector.startGroup("BloomPostFX - General");
   PostEffectEditorInspector.addCallbackField("$PostFX::BloomPostFX::Enabled", "Enabled", "bool", "", $PostFX::BloomPostFX::Enabled, "", "toggleBloomPostFX");
	 PostEffectEditorInspector.addField("$PostFX::BloomPostFX::quality", "Quality", "list", "0,1,2,3", $PostFX::BloomPostFX::quality, "0,1,2,3");
	 PostEffectEditorInspector.addField("$PostFX::BloomPostFX::threshold", "Threshold", "range", "", $PostFX::BloomPostFX::threshold, "0 1 10");
	 PostEffectEditorInspector.addField("$PostFX::BloomPostFX::intensity", "Intensity", "range", "", $PostFX::BloomPostFX::intensity, "0 2 10");
	 PostEffectEditorInspector.addField("$PostFX::BloomPostFX::radius", "Radius", "float", "", $PostFX::BloomPostFX::radius, "");
   PostEffectEditorInspector.endGroup();
}

//This is called back from our callbackField defined in populatePostFXSettings to
//Allow us to easily toggle the postFX and have it respond immediately
function PostEffectEditorInspector::toggleBloomPostFX(%this)
{
   if($PostFX::BloomPostFX::Enabled)
      BloomPostFX.enable();
   else
      BloomPostFX.disable();
}

//This function pair(applyFromPreset and settingsApply) are done the way they are, with the separated variables
//so that we can effectively store the 'settings' away from the live variables that the postFX's actually utilize
//when rendering. This allows us to modify things but still leave room for reverting or temporarily applying them
function BloomPostFX::applyFromPreset(%this)
{
   if($PostFX::BloomPostFX::Enabled)
      %this.enable();
   else
      %this.disable();
}

function BloomPostFX::savePresetSettings(%this)
{
   PostFXManager::savePresetSetting("$PostFX::BloomPostFX::Enabled");
	 PostFXManager::savePresetSetting("$PostFX::BloomPostFX::quality");
	 PostFXManager::savePresetSetting("$PostFX::BloomPostFX::threshold");
	 PostFXManager::savePresetSetting("$PostFX::BloomPostFX::intensity");
	 PostFXManager::savePresetSetting("$PostFX::BloomPostFX::radius");
}

//Our actual postFX
singleton PostEffect( BloomPostFX )
{
   enabled = false;
	 allowReflectPass = false;
   
   renderTime = "PFXAfterDiffuse";
	 renderBin = "ObjTranslucentBin";
   renderPriority = 0.9; 
	 
   shader = PFX_BloomThreshold_Shader;
   stateBlock = BloomPostFX_SampleStateBlock;
   texture[0] = "$backBuffer";
   target = "$outTex";
	 targetClear = PFXTargetClear_OnDraw;
	 
	 new PostEffect()
	 {
		allowReflectPass = false;
		shader = PFX_PassthruShader;
		stateBlock = BloomPostFX_SampleStateBlock;
		texture[0] = "$inTex";
		target = "#bloom0";
		targetScale = "0.5 0.5";
	 };
	 
	 new PostEffect()
	 {
		allowReflectPass = false;
		shader = PFX_PassthruShader;
		stateBlock = BloomPostFX_SampleStateBlock;
		texture[0] = "#bloom0";
		target = "#bloom1";
		targetScale = "0.25 0.25";
	 };
	 
	 new PostEffect()
	 {
		internalName = "blur_one";
		allowReflectPass = false;
		shader = PFX_BloomUpSample_Shader;
		stateBlock = BloomPostFX_SampleStateBlock;
		texture[0] = "#bloom0";
		target = "#blur0";
	 };
	 
	 new PostEffect()
	 {
	  internalName = "blur_two";
		allowReflectPass = false;
		shader = PFX_BloomUpSample_Shader;
		stateBlock = BloomPostFX_SampleStateBlock;
		texture[0] = "#bloom1";
		target = "#blur1";
		targetScale = "0.5 0.5";
	 };
	 
	 new PostEffect()
	 {
	  internalName = "bloom_combine";
		allowReflectPass = false;
		shader = PFX_BloomCombine_Shader;
		stateBlock = BloomPostFX_Combine_SampleStateBlock;
		texture[0] = "#blur0";
		texture[1] = "#blur1";
		texture[2] = "$backBuffer";
		target = "$backBuffer";
	 };
};
