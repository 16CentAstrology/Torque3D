//-----------------------------------------------------------------------------
// Copyright (c) 2012 GarageGames, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
//-----------------------------------------------------------------------------

$PostFX::BloomPostFX::threshold = 0.75;
$PostFX::BloomPostFX::intensity = 0.5;
$PostFX::BloomPostFX::radius = 8.0;

$mipsCount = 4;

singleton ShaderData( PFX_BloomThreshold_Shader )
{
   DXVertexShaderFile = $Core::CommonShaderPath @ "/postFX/postFxV.hlsl";
	 DXPixelShaderFile  = "./bloomThresholdP.hlsl";
	 
	 samplerNames[0] = "$inputTex";
	 
	 pixVersion = 3.0;
};

singleton ShaderData( PFX_BloomDownSample_Shader )
{
   DXVertexShaderFile = $Core::CommonShaderPath @ "/postFX/postFxV.hlsl";
	 DXPixelShaderFile  = "./downSampleP.hlsl";
	 
	 samplerNames[0] = "$inputTex";
	 
	 pixVersion = 3.0;
};

singleton ShaderData( PFX_BloomUpSample_Shader )
{
   DXVertexShaderFile = $Core::CommonShaderPath @ "/postFX/postFxV.hlsl";
	 DXPixelShaderFile  = "./upSampleP.hlsl";
	 
	 samplerNames[0] = "$nxtTex";
	 samplerNames[1] = "$mipTex";
	 
	 pixVersion = 3.0;
};

singleton ShaderData( PFX_BloomStrength_Shader )
{
   DXVertexShaderFile = $Core::CommonShaderPath @ "/postFX/postFxV.hlsl";
	 DXPixelShaderFile  = "./bloomStrengthP.hlsl";
	 
	 samplerNames[0] = "$inputTex";
	 
	 pixVersion = 3.0;
};

singleton GFXStateBlockData( BloomPostFX_SampleStateBlock : PFX_DefaultStateBlock )
{
   samplersDefined = true;
   samplerStates[0] = SamplerClampLinear;
	 samplerStates[1] = SamplerClampLinear;
};

singleton GFXStateBlockData( BloomPostFX_Add_SampleStateBlock : PFX_DefaultStateBlock )
{
   alphaDefined = true;
   alphaTestEnable = true;
   alphaTestRef = 1;
   alphaTestFunc = GFXCmpGreaterEqual;
         
   // Do a one to one blend.
   blendDefined = true;
   blendEnable = true;
   blendSrc = GFXBlendOne;
   blendDest = GFXBlendOne;

	 samplersDefined = true;
   samplerStates[0] = SamplerClampLinear;
};

function BloomPostFX::setShaderConsts( %this )
{
	%this.setShaderConst("$threshold", $PostFX::BloomPostFX::threshold);
	
	%blur = %this->bloomBlur;
	for (%idx = 0; %idx < $mipsCount; %idx++)
	{
		%mip = %blur.getObject($mipsCount + %idx);
		%mip.setShaderConst("$filterRadius", $PostFX::BloomPostFX::radius);
	}
	
	%final = %this->bloomFinal;
	%final.setShaderConst("$strength", $PostFX::BloomPostFX::intensity);
}

function BloomPostFX::preProcess( %this )
{
}

// This function sets up s sort of "mip-chain" for the bloom effect
// Not really "optimal" but it works well enough
function SetupBlurFX()
{
	%blurFX = new PostEffect()
	{
	   internalName = "bloomBlur";
	   allowReflectPass = false;
		 shader = PFX_BloomDownSample_Shader;
  	 stateBlock = BloomPostFX_SampleStateBlock;
		 texture[0] = "#threshold";
  	 target = "#bloom_0";
		 targetFormat = "GFXFormatR16G16B16A16F";
	};
	
  %textureName = "#bloom_0";
  for (%idx = 0; %idx < $mipsCount; %idx++)
  {
  	%mipName = "bloom_" @ (%idx + 1);
  	%mipFX = new PostEffect()
  	{ 
  		internalName = %mipName;
  		allowReflectPass = false;
  		shader = PFX_BloomDownSample_Shader;
  		stateBlock = BloomPostFX_SampleStateBlock;
  		texture[0] = %textureName;
  		target = "#" @ %mipName;
			targetScale = "0.5 0.5";
  		targetFormat = "GFXFormatR16G16B16A16F";
  	};
  	
  	%blurFX.add(%mipFX);
		%textureName = "#" @ %mipName;
  }
	
	for (%idx = $mipsCount; %idx > 0; %idx--)
	{
		%nxt = "#bloom_" @ (%idx - 1);
		%mipName = "upsample_" @ (%idx - 1);
		echo(%mipName SPC %textureName SPC %nxt);
		
		%mipFX = new PostEffect()
  	{
			internalName = %mipName;
			allowReflectPass = false;
			shader = PFX_BloomUpSample_Shader;
			stateBlock = BloomPostFX_SampleStateBlock;
			texture[0] = %nxt;
			texture[1] = %textureName;
			target = "#" @ %mipName;
		};
		
		%blurFX.add(%mipFX);
		%textureName = "#" @ %mipName;
	}
	
	return %blurFX;
}

function BloomPostFX::onAdd(%this)
{
	 %this.add(SetupBlurFX());
	 
   //Register the postFX with the manager
   PostFXManager.registerPostEffect(%this);
}

function BloomPostFX::onEnabled( %this )
{
   return true;
}

function BloomPostFX::onDisabled( %this )
{
   return true;
}

//This is used to populate the PostFXEditor's settings so the post FX can be edited
//This is automatically polled for any postFX that has been registered(in our onAdd) and the settings
//are thus exposed for editing
function BloomPostFX::populatePostFXSettings(%this)
{
   PostEffectEditorInspector.startGroup("BloomPostFX - General");
   PostEffectEditorInspector.addCallbackField("$PostFX::BloomPostFX::Enabled", "Enabled", "bool", "", $PostFX::BloomPostFX::Enabled, "", "toggleBloomPostFX");
	 PostEffectEditorInspector.addField("$PostFX::BloomPostFX::threshold", "Threshold", "range", "", $PostFX::BloomPostFX::threshold, "0 1 10");
	 PostEffectEditorInspector.addField("$PostFX::BloomPostFX::intensity", "Intensity", "range", "", $PostFX::BloomPostFX::intensity, "0 2 10");
	 PostEffectEditorInspector.addField("$PostFX::BloomPostFX::radius", "Radius", "float", "", $PostFX::BloomPostFX::radius, "");
   PostEffectEditorInspector.endGroup();
}

//This is called back from our callbackField defined in populatePostFXSettings to
//Allow us to easily toggle the postFX and have it respond immediately
function PostEffectEditorInspector::toggleBloomPostFX(%this)
{
   if($PostFX::BloomPostFX::Enabled)
      BloomPostFX.enable();
   else
      BloomPostFX.disable();
}

//This function pair(applyFromPreset and settingsApply) are done the way they are, with the separated variables
//so that we can effectively store the 'settings' away from the live variables that the postFX's actually utilize
//when rendering. This allows us to modify things but still leave room for reverting or temporarily applying them
function BloomPostFX::applyFromPreset(%this)
{
   if($PostFX::BloomPostFX::Enabled)
      %this.enable();
   else
      %this.disable();
}

function BloomPostFX::savePresetSettings(%this)
{
   PostFXManager::savePresetSetting("$PostFX::BloomPostFX::Enabled");
	 PostFXManager::savePresetSetting("$PostFX::BloomPostFX::threshold");
	 PostFXManager::savePresetSetting("$PostFX::BloomPostFX::intensity");
	 PostFXManager::savePresetSetting("$PostFX::BloomPostFX::radius");
}

//Our actual postFX
singleton PostEffect( BloomPostFX )
{
   enabled = false;
	 allowReflectPass = false;
   
   renderTime = "PFXBeforeBin";
	 renderBin = "EditorBin";
   renderPriority = 9999; 
	 
   shader = PFX_BloomThreshold_Shader;
   stateBlock = BloomPostFX_SampleStateBlock;
   texture[0] = "$backBuffer";
   target = "#threshold";
	 targetFormat = "GFXFormatR16G16B16A16F";
	 targetClear = PFXTargetClear_OnDraw;
	 targetClearColor = "0 0 0 0";
	 
	 new PostEffect()
	 {
	  internalName = "bloomFinal";
		allowReflectPass = false;
		shader = PFX_BloomStrength_Shader;
		stateBlock = BloomPostFX_Add_SampleStateBlock;
		texture[0] = "#upsample_0";
		target = "$backBuffer";
	 };
};
