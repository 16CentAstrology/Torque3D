name: CMake

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    if: github.repository == 'TorqueGameEngines/Torque3D'
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - uses: seanmiddleditch/gha-setup-ninja@master
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Setup Environment
      run:   |
             if [ "$RUNNER_OS" == "Linux" ]; then
                  sudo apt-get update && \
                  sudo apt-get install -y \
                    build-essential \
                    nasm \
                    libogg-dev \
                    libxft-dev \
                    libx11-dev \
                    libxxf86vm-dev \
                    libopenal-dev \
                    libfreetype6-dev \
                    libxcursor-dev \
                    libxinerama-dev \
                    libxi-dev \
                    libxrandr-dev \
                    libxss-dev \
                    libglu1-mesa-dev \
                    libgtk-3-dev
             fi
      shell: bash
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DTORQUE_APP_NAME=Torque3D -DTORQUE_TESTING=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install

    - name: Test
      run: |
         cd "${{github.workspace}}/My Projects/Torque3D/game"
         if [ "$RUNNER_OS" == "macOS" ]; then
            ./Torque3D.app/Contents/MacOS/Torque3D runTests.tscript
         else
            ./Torque3D runTests.tscript
         fi
      shell: bash

    - name: Upload Test Report
      uses: actions/upload-artifact@v3
      if: always() # always run even if the previous step fails
      with:
         name: junit-test-results
         path: '${{github.workspace}}/My Projects/Torque3D/game/test_detail.xml'
         retention-days: 1

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: success() || failure() # always run even if the previous step fails
      with:
         report_paths: '${{github.workspace}}/My Projects/Torque3D/game/test_detail.xml'

---
name: Report Test Results
on:
   workflow_run:
      workflows: [CMake]
      types: [completed]

permissions:
   checks: write

jobs:
   checks:
      runs-on: ubuntu-latest
      steps:
         - name: Download Test Report
           uses: dawidd6/action-download-artifact@v2
           with:
              name: junit-test-results
              workflow: ${{ github.event.workflow.id }}
              run_id: ${{ github.event.workflow_run.id }}
         - name: Publish Test Report
           uses: mikepenz/action-junit-report@v3
           with:
              commit: ${{github.event.workflow_run.head_sha}}
              report_paths: '${{github.workspace}}/My Projects/Torque3D/game/test_detail.xml'
